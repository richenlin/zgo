// Code generated by entc, DO NOT EDIT.

package demo

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/suisrc/zgo/app/model/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCode), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Demo applies equality check predicate on the "demo" field. It's identical to DemoEQ.
func Demo(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDemo), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// Creator applies equality check predicate on the "creator" field. It's identical to CreatorEQ.
func Creator(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreator), v))
	})
}

// Updator applies equality check predicate on the "updator" field. It's identical to UpdatorEQ.
func Updator(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdator), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpadtedAt applies equality check predicate on the "upadted_at" field. It's identical to UpadtedAtEQ.
func UpadtedAt(v time.Time) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpadtedAt), v))
	})
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCode), v))
	})
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCode), v))
	})
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Demo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Demo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCode), v...))
	})
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Demo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Demo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCode), v...))
	})
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCode), v))
	})
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCode), v))
	})
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCode), v))
	})
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCode), v))
	})
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCode), v))
	})
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCode), v))
	})
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCode), v))
	})
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCode), v))
	})
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCode), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Demo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Demo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Demo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Demo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// DemoEQ applies the EQ predicate on the "demo" field.
func DemoEQ(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDemo), v))
	})
}

// DemoNEQ applies the NEQ predicate on the "demo" field.
func DemoNEQ(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDemo), v))
	})
}

// DemoIn applies the In predicate on the "demo" field.
func DemoIn(vs ...string) predicate.Demo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Demo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDemo), v...))
	})
}

// DemoNotIn applies the NotIn predicate on the "demo" field.
func DemoNotIn(vs ...string) predicate.Demo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Demo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDemo), v...))
	})
}

// DemoGT applies the GT predicate on the "demo" field.
func DemoGT(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDemo), v))
	})
}

// DemoGTE applies the GTE predicate on the "demo" field.
func DemoGTE(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDemo), v))
	})
}

// DemoLT applies the LT predicate on the "demo" field.
func DemoLT(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDemo), v))
	})
}

// DemoLTE applies the LTE predicate on the "demo" field.
func DemoLTE(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDemo), v))
	})
}

// DemoContains applies the Contains predicate on the "demo" field.
func DemoContains(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDemo), v))
	})
}

// DemoHasPrefix applies the HasPrefix predicate on the "demo" field.
func DemoHasPrefix(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDemo), v))
	})
}

// DemoHasSuffix applies the HasSuffix predicate on the "demo" field.
func DemoHasSuffix(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDemo), v))
	})
}

// DemoEqualFold applies the EqualFold predicate on the "demo" field.
func DemoEqualFold(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDemo), v))
	})
}

// DemoContainsFold applies the ContainsFold predicate on the "demo" field.
func DemoContainsFold(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDemo), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.Demo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Demo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.Demo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Demo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// CreatorEQ applies the EQ predicate on the "creator" field.
func CreatorEQ(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreator), v))
	})
}

// CreatorNEQ applies the NEQ predicate on the "creator" field.
func CreatorNEQ(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreator), v))
	})
}

// CreatorIn applies the In predicate on the "creator" field.
func CreatorIn(vs ...string) predicate.Demo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Demo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreator), v...))
	})
}

// CreatorNotIn applies the NotIn predicate on the "creator" field.
func CreatorNotIn(vs ...string) predicate.Demo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Demo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreator), v...))
	})
}

// CreatorGT applies the GT predicate on the "creator" field.
func CreatorGT(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreator), v))
	})
}

// CreatorGTE applies the GTE predicate on the "creator" field.
func CreatorGTE(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreator), v))
	})
}

// CreatorLT applies the LT predicate on the "creator" field.
func CreatorLT(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreator), v))
	})
}

// CreatorLTE applies the LTE predicate on the "creator" field.
func CreatorLTE(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreator), v))
	})
}

// CreatorContains applies the Contains predicate on the "creator" field.
func CreatorContains(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCreator), v))
	})
}

// CreatorHasPrefix applies the HasPrefix predicate on the "creator" field.
func CreatorHasPrefix(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCreator), v))
	})
}

// CreatorHasSuffix applies the HasSuffix predicate on the "creator" field.
func CreatorHasSuffix(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCreator), v))
	})
}

// CreatorEqualFold applies the EqualFold predicate on the "creator" field.
func CreatorEqualFold(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCreator), v))
	})
}

// CreatorContainsFold applies the ContainsFold predicate on the "creator" field.
func CreatorContainsFold(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCreator), v))
	})
}

// UpdatorEQ applies the EQ predicate on the "updator" field.
func UpdatorEQ(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdator), v))
	})
}

// UpdatorNEQ applies the NEQ predicate on the "updator" field.
func UpdatorNEQ(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdator), v))
	})
}

// UpdatorIn applies the In predicate on the "updator" field.
func UpdatorIn(vs ...string) predicate.Demo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Demo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdator), v...))
	})
}

// UpdatorNotIn applies the NotIn predicate on the "updator" field.
func UpdatorNotIn(vs ...string) predicate.Demo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Demo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdator), v...))
	})
}

// UpdatorGT applies the GT predicate on the "updator" field.
func UpdatorGT(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdator), v))
	})
}

// UpdatorGTE applies the GTE predicate on the "updator" field.
func UpdatorGTE(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdator), v))
	})
}

// UpdatorLT applies the LT predicate on the "updator" field.
func UpdatorLT(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdator), v))
	})
}

// UpdatorLTE applies the LTE predicate on the "updator" field.
func UpdatorLTE(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdator), v))
	})
}

// UpdatorContains applies the Contains predicate on the "updator" field.
func UpdatorContains(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUpdator), v))
	})
}

// UpdatorHasPrefix applies the HasPrefix predicate on the "updator" field.
func UpdatorHasPrefix(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUpdator), v))
	})
}

// UpdatorHasSuffix applies the HasSuffix predicate on the "updator" field.
func UpdatorHasSuffix(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUpdator), v))
	})
}

// UpdatorEqualFold applies the EqualFold predicate on the "updator" field.
func UpdatorEqualFold(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUpdator), v))
	})
}

// UpdatorContainsFold applies the ContainsFold predicate on the "updator" field.
func UpdatorContainsFold(v string) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUpdator), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Demo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Demo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Demo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Demo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpadtedAtEQ applies the EQ predicate on the "upadted_at" field.
func UpadtedAtEQ(v time.Time) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpadtedAt), v))
	})
}

// UpadtedAtNEQ applies the NEQ predicate on the "upadted_at" field.
func UpadtedAtNEQ(v time.Time) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpadtedAt), v))
	})
}

// UpadtedAtIn applies the In predicate on the "upadted_at" field.
func UpadtedAtIn(vs ...time.Time) predicate.Demo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Demo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpadtedAt), v...))
	})
}

// UpadtedAtNotIn applies the NotIn predicate on the "upadted_at" field.
func UpadtedAtNotIn(vs ...time.Time) predicate.Demo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Demo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpadtedAt), v...))
	})
}

// UpadtedAtGT applies the GT predicate on the "upadted_at" field.
func UpadtedAtGT(v time.Time) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpadtedAt), v))
	})
}

// UpadtedAtGTE applies the GTE predicate on the "upadted_at" field.
func UpadtedAtGTE(v time.Time) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpadtedAt), v))
	})
}

// UpadtedAtLT applies the LT predicate on the "upadted_at" field.
func UpadtedAtLT(v time.Time) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpadtedAt), v))
	})
}

// UpadtedAtLTE applies the LTE predicate on the "upadted_at" field.
func UpadtedAtLTE(v time.Time) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpadtedAt), v))
	})
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ParentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.Demo) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildren applies the HasEdge predicate on the "children" edge.
func HasChildren() predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChildrenTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildrenWith applies the HasEdge predicate on the "children" edge with a given conditions (other predicates).
func HasChildrenWith(preds ...predicate.Demo) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Demo) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Demo) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Demo) predicate.Demo {
	return predicate.Demo(func(s *sql.Selector) {
		p(s.Not())
	})
}
