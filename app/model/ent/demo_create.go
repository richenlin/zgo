// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/suisrc/zgo/app/model/ent/demo"
)

// DemoCreate is the builder for creating a Demo entity.
type DemoCreate struct {
	config
	mutation *DemoMutation
	hooks    []Hook
}

// SetCode sets the code field.
func (dc *DemoCreate) SetCode(s string) *DemoCreate {
	dc.mutation.SetCode(s)
	return dc
}

// SetName sets the name field.
func (dc *DemoCreate) SetName(s string) *DemoCreate {
	dc.mutation.SetName(s)
	return dc
}

// SetDemo sets the demo field.
func (dc *DemoCreate) SetDemo(s string) *DemoCreate {
	dc.mutation.SetDemo(s)
	return dc
}

// SetStatus sets the status field.
func (dc *DemoCreate) SetStatus(i int) *DemoCreate {
	dc.mutation.SetStatus(i)
	return dc
}

// SetCreator sets the creator field.
func (dc *DemoCreate) SetCreator(s string) *DemoCreate {
	dc.mutation.SetCreator(s)
	return dc
}

// SetUpdator sets the updator field.
func (dc *DemoCreate) SetUpdator(s string) *DemoCreate {
	dc.mutation.SetUpdator(s)
	return dc
}

// SetCreatedAt sets the created_at field.
func (dc *DemoCreate) SetCreatedAt(t time.Time) *DemoCreate {
	dc.mutation.SetCreatedAt(t)
	return dc
}

// SetUpadtedAt sets the upadted_at field.
func (dc *DemoCreate) SetUpadtedAt(t time.Time) *DemoCreate {
	dc.mutation.SetUpadtedAt(t)
	return dc
}

// SetParentID sets the parent edge to Demo by id.
func (dc *DemoCreate) SetParentID(id int) *DemoCreate {
	dc.mutation.SetParentID(id)
	return dc
}

// SetNillableParentID sets the parent edge to Demo by id if the given value is not nil.
func (dc *DemoCreate) SetNillableParentID(id *int) *DemoCreate {
	if id != nil {
		dc = dc.SetParentID(*id)
	}
	return dc
}

// SetParent sets the parent edge to Demo.
func (dc *DemoCreate) SetParent(d *Demo) *DemoCreate {
	return dc.SetParentID(d.ID)
}

// AddChildIDs adds the children edge to Demo by ids.
func (dc *DemoCreate) AddChildIDs(ids ...int) *DemoCreate {
	dc.mutation.AddChildIDs(ids...)
	return dc
}

// AddChildren adds the children edges to Demo.
func (dc *DemoCreate) AddChildren(d ...*Demo) *DemoCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dc.AddChildIDs(ids...)
}

// Mutation returns the DemoMutation object of the builder.
func (dc *DemoCreate) Mutation() *DemoMutation {
	return dc.mutation
}

// Save creates the Demo in the database.
func (dc *DemoCreate) Save(ctx context.Context) (*Demo, error) {
	if _, ok := dc.mutation.Code(); !ok {
		return nil, &ValidationError{Name: "code", err: errors.New("ent: missing required field \"code\"")}
	}
	if _, ok := dc.mutation.Name(); !ok {
		return nil, &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := dc.mutation.Demo(); !ok {
		return nil, &ValidationError{Name: "demo", err: errors.New("ent: missing required field \"demo\"")}
	}
	if _, ok := dc.mutation.Status(); !ok {
		return nil, &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	if v, ok := dc.mutation.Status(); ok {
		if err := demo.StatusValidator(v); err != nil {
			return nil, &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	if _, ok := dc.mutation.Creator(); !ok {
		return nil, &ValidationError{Name: "creator", err: errors.New("ent: missing required field \"creator\"")}
	}
	if _, ok := dc.mutation.Updator(); !ok {
		return nil, &ValidationError{Name: "updator", err: errors.New("ent: missing required field \"updator\"")}
	}
	if _, ok := dc.mutation.CreatedAt(); !ok {
		return nil, &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := dc.mutation.UpadtedAt(); !ok {
		return nil, &ValidationError{Name: "upadted_at", err: errors.New("ent: missing required field \"upadted_at\"")}
	}
	var (
		err  error
		node *Demo
	)
	if len(dc.hooks) == 0 {
		node, err = dc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DemoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dc.mutation = mutation
			node, err = dc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dc.hooks) - 1; i >= 0; i-- {
			mut = dc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DemoCreate) SaveX(ctx context.Context) *Demo {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (dc *DemoCreate) sqlSave(ctx context.Context) (*Demo, error) {
	d, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	d.ID = int(id)
	return d, nil
}

func (dc *DemoCreate) createSpec() (*Demo, *sqlgraph.CreateSpec) {
	var (
		d     = &Demo{config: dc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: demo.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: demo.FieldID,
			},
		}
	)
	if value, ok := dc.mutation.Code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: demo.FieldCode,
		})
		d.Code = value
	}
	if value, ok := dc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: demo.FieldName,
		})
		d.Name = value
	}
	if value, ok := dc.mutation.Demo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: demo.FieldDemo,
		})
		d.Demo = value
	}
	if value, ok := dc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: demo.FieldStatus,
		})
		d.Status = value
	}
	if value, ok := dc.mutation.Creator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: demo.FieldCreator,
		})
		d.Creator = value
	}
	if value, ok := dc.mutation.Updator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: demo.FieldUpdator,
		})
		d.Updator = value
	}
	if value, ok := dc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: demo.FieldCreatedAt,
		})
		d.CreatedAt = value
	}
	if value, ok := dc.mutation.UpadtedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: demo.FieldUpadtedAt,
		})
		d.UpadtedAt = value
	}
	if nodes := dc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   demo.ParentTable,
			Columns: []string{demo.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: demo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   demo.ChildrenTable,
			Columns: []string{demo.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: demo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return d, _spec
}
