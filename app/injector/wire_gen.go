// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package injector

import (
	"github.com/google/wire"
	"zgo/engine"
	"zgo/engine/gin"
	"zgo/router"
)

// Injectors from wire.go:

func BuildInjector() (*Injector, func(), error) {
	webFramework, err := gin.InitWebFramework()
	if err != nil {
		return nil, nil, err
	}
	initWebResultOptions := &InitWebResultOptions{
		eng: webFramework,
	}
	initWebResult := InitWebFunc(initWebResultOptions)
	rootPath := router.NewContextPath(webFramework)
	helloAPI := router.NewHelloAPI(rootPath)
	demoAPI := router.NewDemoAPI(rootPath)
	injector := &Injector{
		Engine:   webFramework,
		Result:   initWebResult,
		HelloAPI: helloAPI,
		DemoAPI:  demoAPI,
	}
	return injector, func() {
	}, nil
}

// wire.go:

// InjectorSet 注入Injector
var InjectorSet = wire.NewSet(wire.Struct(new(Injector), "*"))

// Injector 注入器(用于初始化完成之后的引用)
type Injector struct {
	Engine   engine.IEngine
	Result   *InitWebResult
	HelloAPI router.HelloAPI
	DemoAPI  router.DemoAPI
}
