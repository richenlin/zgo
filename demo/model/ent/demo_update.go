// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/suisrc/zgo/demo/model/ent/demo"
	"github.com/suisrc/zgo/demo/model/ent/predicate"
)

// DemoUpdate is the builder for updating Demo entities.
type DemoUpdate struct {
	config
	hooks      []Hook
	mutation   *DemoMutation
	predicates []predicate.Demo
}

// Where adds a new predicate for the builder.
func (du *DemoUpdate) Where(ps ...predicate.Demo) *DemoUpdate {
	du.predicates = append(du.predicates, ps...)
	return du
}

// SetCode sets the code field.
func (du *DemoUpdate) SetCode(s string) *DemoUpdate {
	du.mutation.SetCode(s)
	return du
}

// SetName sets the name field.
func (du *DemoUpdate) SetName(s string) *DemoUpdate {
	du.mutation.SetName(s)
	return du
}

// SetMemo sets the memo field.
func (du *DemoUpdate) SetMemo(s string) *DemoUpdate {
	du.mutation.SetMemo(s)
	return du
}

// SetStatus sets the status field.
func (du *DemoUpdate) SetStatus(i int) *DemoUpdate {
	du.mutation.ResetStatus()
	du.mutation.SetStatus(i)
	return du
}

// SetNillableStatus sets the status field if the given value is not nil.
func (du *DemoUpdate) SetNillableStatus(i *int) *DemoUpdate {
	if i != nil {
		du.SetStatus(*i)
	}
	return du
}

// AddStatus adds i to status.
func (du *DemoUpdate) AddStatus(i int) *DemoUpdate {
	du.mutation.AddStatus(i)
	return du
}

// SetCreator sets the creator field.
func (du *DemoUpdate) SetCreator(s string) *DemoUpdate {
	du.mutation.SetCreator(s)
	return du
}

// SetNillableCreator sets the creator field if the given value is not nil.
func (du *DemoUpdate) SetNillableCreator(s *string) *DemoUpdate {
	if s != nil {
		du.SetCreator(*s)
	}
	return du
}

// SetUpdator sets the updator field.
func (du *DemoUpdate) SetUpdator(s string) *DemoUpdate {
	du.mutation.SetUpdator(s)
	return du
}

// SetNillableUpdator sets the updator field if the given value is not nil.
func (du *DemoUpdate) SetNillableUpdator(s *string) *DemoUpdate {
	if s != nil {
		du.SetUpdator(*s)
	}
	return du
}

// SetCreatedAt sets the created_at field.
func (du *DemoUpdate) SetCreatedAt(t time.Time) *DemoUpdate {
	du.mutation.SetCreatedAt(t)
	return du
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (du *DemoUpdate) SetNillableCreatedAt(t *time.Time) *DemoUpdate {
	if t != nil {
		du.SetCreatedAt(*t)
	}
	return du
}

// SetUpdatedAt sets the updated_at field.
func (du *DemoUpdate) SetUpdatedAt(t time.Time) *DemoUpdate {
	du.mutation.SetUpdatedAt(t)
	return du
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (du *DemoUpdate) SetNillableUpdatedAt(t *time.Time) *DemoUpdate {
	if t != nil {
		du.SetUpdatedAt(*t)
	}
	return du
}

// SetParentID sets the parent edge to Demo by id.
func (du *DemoUpdate) SetParentID(id int) *DemoUpdate {
	du.mutation.SetParentID(id)
	return du
}

// SetNillableParentID sets the parent edge to Demo by id if the given value is not nil.
func (du *DemoUpdate) SetNillableParentID(id *int) *DemoUpdate {
	if id != nil {
		du = du.SetParentID(*id)
	}
	return du
}

// SetParent sets the parent edge to Demo.
func (du *DemoUpdate) SetParent(d *Demo) *DemoUpdate {
	return du.SetParentID(d.ID)
}

// AddChildIDs adds the children edge to Demo by ids.
func (du *DemoUpdate) AddChildIDs(ids ...int) *DemoUpdate {
	du.mutation.AddChildIDs(ids...)
	return du
}

// AddChildren adds the children edges to Demo.
func (du *DemoUpdate) AddChildren(d ...*Demo) *DemoUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.AddChildIDs(ids...)
}

// Mutation returns the DemoMutation object of the builder.
func (du *DemoUpdate) Mutation() *DemoMutation {
	return du.mutation
}

// ClearParent clears the parent edge to Demo.
func (du *DemoUpdate) ClearParent() *DemoUpdate {
	du.mutation.ClearParent()
	return du
}

// RemoveChildIDs removes the children edge to Demo by ids.
func (du *DemoUpdate) RemoveChildIDs(ids ...int) *DemoUpdate {
	du.mutation.RemoveChildIDs(ids...)
	return du
}

// RemoveChildren removes children edges to Demo.
func (du *DemoUpdate) RemoveChildren(d ...*Demo) *DemoUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.RemoveChildIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (du *DemoUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := du.mutation.Status(); ok {
		if err := demo.StatusValidator(v); err != nil {
			return 0, &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(du.hooks) == 0 {
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DemoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DemoUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DemoUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DemoUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DemoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   demo.Table,
			Columns: demo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: demo.FieldID,
			},
		},
	}
	if ps := du.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: demo.FieldCode,
		})
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: demo.FieldName,
		})
	}
	if value, ok := du.mutation.Memo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: demo.FieldMemo,
		})
	}
	if value, ok := du.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: demo.FieldStatus,
		})
	}
	if value, ok := du.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: demo.FieldStatus,
		})
	}
	if value, ok := du.mutation.Creator(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: demo.FieldCreator,
		})
	}
	if value, ok := du.mutation.Updator(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: demo.FieldUpdator,
		})
	}
	if value, ok := du.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: demo.FieldCreatedAt,
		})
	}
	if value, ok := du.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: demo.FieldUpdatedAt,
		})
	}
	if du.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   demo.ParentTable,
			Columns: []string{demo.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: demo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   demo.ParentTable,
			Columns: []string{demo.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: demo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := du.mutation.RemovedChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   demo.ChildrenTable,
			Columns: []string{demo.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: demo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   demo.ChildrenTable,
			Columns: []string{demo.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: demo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{demo.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DemoUpdateOne is the builder for updating a single Demo entity.
type DemoUpdateOne struct {
	config
	hooks    []Hook
	mutation *DemoMutation
}

// SetCode sets the code field.
func (duo *DemoUpdateOne) SetCode(s string) *DemoUpdateOne {
	duo.mutation.SetCode(s)
	return duo
}

// SetName sets the name field.
func (duo *DemoUpdateOne) SetName(s string) *DemoUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetMemo sets the memo field.
func (duo *DemoUpdateOne) SetMemo(s string) *DemoUpdateOne {
	duo.mutation.SetMemo(s)
	return duo
}

// SetStatus sets the status field.
func (duo *DemoUpdateOne) SetStatus(i int) *DemoUpdateOne {
	duo.mutation.ResetStatus()
	duo.mutation.SetStatus(i)
	return duo
}

// SetNillableStatus sets the status field if the given value is not nil.
func (duo *DemoUpdateOne) SetNillableStatus(i *int) *DemoUpdateOne {
	if i != nil {
		duo.SetStatus(*i)
	}
	return duo
}

// AddStatus adds i to status.
func (duo *DemoUpdateOne) AddStatus(i int) *DemoUpdateOne {
	duo.mutation.AddStatus(i)
	return duo
}

// SetCreator sets the creator field.
func (duo *DemoUpdateOne) SetCreator(s string) *DemoUpdateOne {
	duo.mutation.SetCreator(s)
	return duo
}

// SetNillableCreator sets the creator field if the given value is not nil.
func (duo *DemoUpdateOne) SetNillableCreator(s *string) *DemoUpdateOne {
	if s != nil {
		duo.SetCreator(*s)
	}
	return duo
}

// SetUpdator sets the updator field.
func (duo *DemoUpdateOne) SetUpdator(s string) *DemoUpdateOne {
	duo.mutation.SetUpdator(s)
	return duo
}

// SetNillableUpdator sets the updator field if the given value is not nil.
func (duo *DemoUpdateOne) SetNillableUpdator(s *string) *DemoUpdateOne {
	if s != nil {
		duo.SetUpdator(*s)
	}
	return duo
}

// SetCreatedAt sets the created_at field.
func (duo *DemoUpdateOne) SetCreatedAt(t time.Time) *DemoUpdateOne {
	duo.mutation.SetCreatedAt(t)
	return duo
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (duo *DemoUpdateOne) SetNillableCreatedAt(t *time.Time) *DemoUpdateOne {
	if t != nil {
		duo.SetCreatedAt(*t)
	}
	return duo
}

// SetUpdatedAt sets the updated_at field.
func (duo *DemoUpdateOne) SetUpdatedAt(t time.Time) *DemoUpdateOne {
	duo.mutation.SetUpdatedAt(t)
	return duo
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (duo *DemoUpdateOne) SetNillableUpdatedAt(t *time.Time) *DemoUpdateOne {
	if t != nil {
		duo.SetUpdatedAt(*t)
	}
	return duo
}

// SetParentID sets the parent edge to Demo by id.
func (duo *DemoUpdateOne) SetParentID(id int) *DemoUpdateOne {
	duo.mutation.SetParentID(id)
	return duo
}

// SetNillableParentID sets the parent edge to Demo by id if the given value is not nil.
func (duo *DemoUpdateOne) SetNillableParentID(id *int) *DemoUpdateOne {
	if id != nil {
		duo = duo.SetParentID(*id)
	}
	return duo
}

// SetParent sets the parent edge to Demo.
func (duo *DemoUpdateOne) SetParent(d *Demo) *DemoUpdateOne {
	return duo.SetParentID(d.ID)
}

// AddChildIDs adds the children edge to Demo by ids.
func (duo *DemoUpdateOne) AddChildIDs(ids ...int) *DemoUpdateOne {
	duo.mutation.AddChildIDs(ids...)
	return duo
}

// AddChildren adds the children edges to Demo.
func (duo *DemoUpdateOne) AddChildren(d ...*Demo) *DemoUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.AddChildIDs(ids...)
}

// Mutation returns the DemoMutation object of the builder.
func (duo *DemoUpdateOne) Mutation() *DemoMutation {
	return duo.mutation
}

// ClearParent clears the parent edge to Demo.
func (duo *DemoUpdateOne) ClearParent() *DemoUpdateOne {
	duo.mutation.ClearParent()
	return duo
}

// RemoveChildIDs removes the children edge to Demo by ids.
func (duo *DemoUpdateOne) RemoveChildIDs(ids ...int) *DemoUpdateOne {
	duo.mutation.RemoveChildIDs(ids...)
	return duo
}

// RemoveChildren removes children edges to Demo.
func (duo *DemoUpdateOne) RemoveChildren(d ...*Demo) *DemoUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.RemoveChildIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (duo *DemoUpdateOne) Save(ctx context.Context) (*Demo, error) {
	if v, ok := duo.mutation.Status(); ok {
		if err := demo.StatusValidator(v); err != nil {
			return nil, &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}

	var (
		err  error
		node *Demo
	)
	if len(duo.hooks) == 0 {
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DemoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			mut = duo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, duo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DemoUpdateOne) SaveX(ctx context.Context) *Demo {
	d, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return d
}

// Exec executes the query on the entity.
func (duo *DemoUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DemoUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DemoUpdateOne) sqlSave(ctx context.Context) (d *Demo, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   demo.Table,
			Columns: demo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: demo.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Demo.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := duo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: demo.FieldCode,
		})
	}
	if value, ok := duo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: demo.FieldName,
		})
	}
	if value, ok := duo.mutation.Memo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: demo.FieldMemo,
		})
	}
	if value, ok := duo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: demo.FieldStatus,
		})
	}
	if value, ok := duo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: demo.FieldStatus,
		})
	}
	if value, ok := duo.mutation.Creator(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: demo.FieldCreator,
		})
	}
	if value, ok := duo.mutation.Updator(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: demo.FieldUpdator,
		})
	}
	if value, ok := duo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: demo.FieldCreatedAt,
		})
	}
	if value, ok := duo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: demo.FieldUpdatedAt,
		})
	}
	if duo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   demo.ParentTable,
			Columns: []string{demo.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: demo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   demo.ParentTable,
			Columns: []string{demo.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: demo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := duo.mutation.RemovedChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   demo.ChildrenTable,
			Columns: []string{demo.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: demo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   demo.ChildrenTable,
			Columns: []string{demo.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: demo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	d = &Demo{config: duo.config}
	_spec.Assign = d.assignValues
	_spec.ScanValues = d.scanValues()
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{demo.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return d, nil
}
