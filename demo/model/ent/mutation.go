// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/suisrc/zgo/demo/model/ent/demo"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDemo = "Demo"
)

// DemoMutation represents an operation that mutate the Demos
// nodes in the graph.
type DemoMutation struct {
	config
	op              Op
	typ             string
	id              *int
	code            *string
	name            *string
	memo            *string
	status          *int
	addstatus       *int
	creator         *string
	updator         *string
	created_at      *time.Time
	updated_at      *time.Time
	clearedFields   map[string]struct{}
	parent          *int
	clearedparent   bool
	children        map[int]struct{}
	removedchildren map[int]struct{}
	done            bool
	oldValue        func(context.Context) (*Demo, error)
}

var _ ent.Mutation = (*DemoMutation)(nil)

// demoOption allows to manage the mutation configuration using functional options.
type demoOption func(*DemoMutation)

// newDemoMutation creates new mutation for $n.Name.
func newDemoMutation(c config, op Op, opts ...demoOption) *DemoMutation {
	m := &DemoMutation{
		config:        c,
		op:            op,
		typ:           TypeDemo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDemoID sets the id field of the mutation.
func withDemoID(id int) demoOption {
	return func(m *DemoMutation) {
		var (
			err   error
			once  sync.Once
			value *Demo
		)
		m.oldValue = func(ctx context.Context) (*Demo, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Demo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDemo sets the old Demo of the mutation.
func withDemo(node *Demo) demoOption {
	return func(m *DemoMutation) {
		m.oldValue = func(context.Context) (*Demo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DemoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DemoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DemoMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCode sets the code field.
func (m *DemoMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the code value in the mutation.
func (m *DemoMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old code value of the Demo.
// If the Demo object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DemoMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCode is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode reset all changes of the "code" field.
func (m *DemoMutation) ResetCode() {
	m.code = nil
}

// SetName sets the name field.
func (m *DemoMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *DemoMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Demo.
// If the Demo object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DemoMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *DemoMutation) ResetName() {
	m.name = nil
}

// SetMemo sets the memo field.
func (m *DemoMutation) SetMemo(s string) {
	m.memo = &s
}

// Memo returns the memo value in the mutation.
func (m *DemoMutation) Memo() (r string, exists bool) {
	v := m.memo
	if v == nil {
		return
	}
	return *v, true
}

// OldMemo returns the old memo value of the Demo.
// If the Demo object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DemoMutation) OldMemo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMemo is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMemo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemo: %w", err)
	}
	return oldValue.Memo, nil
}

// ResetMemo reset all changes of the "memo" field.
func (m *DemoMutation) ResetMemo() {
	m.memo = nil
}

// SetStatus sets the status field.
func (m *DemoMutation) SetStatus(i int) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the status value in the mutation.
func (m *DemoMutation) Status() (r int, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old status value of the Demo.
// If the Demo object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DemoMutation) OldStatus(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatus is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to status.
func (m *DemoMutation) AddStatus(i int) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the status field in this mutation.
func (m *DemoMutation) AddedStatus() (r int, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus reset all changes of the "status" field.
func (m *DemoMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetCreator sets the creator field.
func (m *DemoMutation) SetCreator(s string) {
	m.creator = &s
}

// Creator returns the creator value in the mutation.
func (m *DemoMutation) Creator() (r string, exists bool) {
	v := m.creator
	if v == nil {
		return
	}
	return *v, true
}

// OldCreator returns the old creator value of the Demo.
// If the Demo object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DemoMutation) OldCreator(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreator is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreator: %w", err)
	}
	return oldValue.Creator, nil
}

// ResetCreator reset all changes of the "creator" field.
func (m *DemoMutation) ResetCreator() {
	m.creator = nil
}

// SetUpdator sets the updator field.
func (m *DemoMutation) SetUpdator(s string) {
	m.updator = &s
}

// Updator returns the updator value in the mutation.
func (m *DemoMutation) Updator() (r string, exists bool) {
	v := m.updator
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdator returns the old updator value of the Demo.
// If the Demo object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DemoMutation) OldUpdator(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdator is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdator: %w", err)
	}
	return oldValue.Updator, nil
}

// ResetUpdator reset all changes of the "updator" field.
func (m *DemoMutation) ResetUpdator() {
	m.updator = nil
}

// SetCreatedAt sets the created_at field.
func (m *DemoMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the created_at value in the mutation.
func (m *DemoMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old created_at value of the Demo.
// If the Demo object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DemoMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt reset all changes of the "created_at" field.
func (m *DemoMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the updated_at field.
func (m *DemoMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the updated_at value in the mutation.
func (m *DemoMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old updated_at value of the Demo.
// If the Demo object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DemoMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt reset all changes of the "updated_at" field.
func (m *DemoMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetParentID sets the parent edge to Demo by id.
func (m *DemoMutation) SetParentID(id int) {
	m.parent = &id
}

// ClearParent clears the parent edge to Demo.
func (m *DemoMutation) ClearParent() {
	m.clearedparent = true
}

// ParentCleared returns if the edge parent was cleared.
func (m *DemoMutation) ParentCleared() bool {
	return m.clearedparent
}

// ParentID returns the parent id in the mutation.
func (m *DemoMutation) ParentID() (id int, exists bool) {
	if m.parent != nil {
		return *m.parent, true
	}
	return
}

// ParentIDs returns the parent ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *DemoMutation) ParentIDs() (ids []int) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent reset all changes of the "parent" edge.
func (m *DemoMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// AddChildIDs adds the children edge to Demo by ids.
func (m *DemoMutation) AddChildIDs(ids ...int) {
	if m.children == nil {
		m.children = make(map[int]struct{})
	}
	for i := range ids {
		m.children[ids[i]] = struct{}{}
	}
}

// RemoveChildIDs removes the children edge to Demo by ids.
func (m *DemoMutation) RemoveChildIDs(ids ...int) {
	if m.removedchildren == nil {
		m.removedchildren = make(map[int]struct{})
	}
	for i := range ids {
		m.removedchildren[ids[i]] = struct{}{}
	}
}

// RemovedChildren returns the removed ids of children.
func (m *DemoMutation) RemovedChildrenIDs() (ids []int) {
	for id := range m.removedchildren {
		ids = append(ids, id)
	}
	return
}

// ChildrenIDs returns the children ids in the mutation.
func (m *DemoMutation) ChildrenIDs() (ids []int) {
	for id := range m.children {
		ids = append(ids, id)
	}
	return
}

// ResetChildren reset all changes of the "children" edge.
func (m *DemoMutation) ResetChildren() {
	m.children = nil
	m.removedchildren = nil
}

// Op returns the operation name.
func (m *DemoMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Demo).
func (m *DemoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DemoMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.code != nil {
		fields = append(fields, demo.FieldCode)
	}
	if m.name != nil {
		fields = append(fields, demo.FieldName)
	}
	if m.memo != nil {
		fields = append(fields, demo.FieldMemo)
	}
	if m.status != nil {
		fields = append(fields, demo.FieldStatus)
	}
	if m.creator != nil {
		fields = append(fields, demo.FieldCreator)
	}
	if m.updator != nil {
		fields = append(fields, demo.FieldUpdator)
	}
	if m.created_at != nil {
		fields = append(fields, demo.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, demo.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DemoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case demo.FieldCode:
		return m.Code()
	case demo.FieldName:
		return m.Name()
	case demo.FieldMemo:
		return m.Memo()
	case demo.FieldStatus:
		return m.Status()
	case demo.FieldCreator:
		return m.Creator()
	case demo.FieldUpdator:
		return m.Updator()
	case demo.FieldCreatedAt:
		return m.CreatedAt()
	case demo.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DemoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case demo.FieldCode:
		return m.OldCode(ctx)
	case demo.FieldName:
		return m.OldName(ctx)
	case demo.FieldMemo:
		return m.OldMemo(ctx)
	case demo.FieldStatus:
		return m.OldStatus(ctx)
	case demo.FieldCreator:
		return m.OldCreator(ctx)
	case demo.FieldUpdator:
		return m.OldUpdator(ctx)
	case demo.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case demo.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Demo field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DemoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case demo.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case demo.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case demo.FieldMemo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemo(v)
		return nil
	case demo.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case demo.FieldCreator:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreator(v)
		return nil
	case demo.FieldUpdator:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdator(v)
		return nil
	case demo.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case demo.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Demo field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DemoMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, demo.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DemoMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case demo.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DemoMutation) AddField(name string, value ent.Value) error {
	switch name {
	case demo.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Demo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DemoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DemoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DemoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Demo nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DemoMutation) ResetField(name string) error {
	switch name {
	case demo.FieldCode:
		m.ResetCode()
		return nil
	case demo.FieldName:
		m.ResetName()
		return nil
	case demo.FieldMemo:
		m.ResetMemo()
		return nil
	case demo.FieldStatus:
		m.ResetStatus()
		return nil
	case demo.FieldCreator:
		m.ResetCreator()
		return nil
	case demo.FieldUpdator:
		m.ResetUpdator()
		return nil
	case demo.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case demo.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Demo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DemoMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.parent != nil {
		edges = append(edges, demo.EdgeParent)
	}
	if m.children != nil {
		edges = append(edges, demo.EdgeChildren)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DemoMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case demo.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	case demo.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.children))
		for id := range m.children {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DemoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedchildren != nil {
		edges = append(edges, demo.EdgeChildren)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DemoMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case demo.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.removedchildren))
		for id := range m.removedchildren {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DemoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedparent {
		edges = append(edges, demo.EdgeParent)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DemoMutation) EdgeCleared(name string) bool {
	switch name {
	case demo.EdgeParent:
		return m.clearedparent
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DemoMutation) ClearEdge(name string) error {
	switch name {
	case demo.EdgeParent:
		m.ClearParent()
		return nil
	}
	return fmt.Errorf("unknown Demo unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DemoMutation) ResetEdge(name string) error {
	switch name {
	case demo.EdgeParent:
		m.ResetParent()
		return nil
	case demo.EdgeChildren:
		m.ResetChildren()
		return nil
	}
	return fmt.Errorf("unknown Demo edge %s", name)
}
