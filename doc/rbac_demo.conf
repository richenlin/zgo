# https://casbin.org/docs/zh-CN/rbac
# p, alice, /alice_data/*, GET, deny
# p, alice, /alice_data/resource1, POST, allow
[request_definition]
r = sub, obj, act

[policy_definition]
p = sub, obj, act, eft

[role_definition]
g = _, _

[policy_effect]
e = some(where (p.eft == allow)) && !some(where (p.eft == deny))

[matchers]
m = g(r.sub, p.sub) &&  keyMatch(r.obj, p.obj) && regexMatch(r.act, p.act)

# 带有域租户的角色定义
# [request_definition]
# r = sub, dom, obj, act
# 
# [policy_definition]
# p = sub, dom, obj, act, eft
# 
# [role_definition]
# g = _, _, _
# 
# [policy_effect]
# e = some(where (p.eft == allow)) && !some(where (p.eft == deny))
# 
# [matchers]
# m = g(r.sub, p.sub, r.dom) && r.dom == p.dom &&  keyMatch(r.obj, p.obj) && regexMatch(r.act, p.act)

# 1.对于sub, 如果非rbac模型,表现为r.sub == p.sub
# 
# 2.内置函数如下
#   Function      arg1                        arg2
#   keyMatch      /alice_data/resource1       /alice_data/*
#   keyMatch2     /alice_data/resource1       /alice_data/:resource
#   keyMatch3     /alice_data/resource1       /alice_data/{resource}
#   keyMatch4     /alice_data/123/book/123    /alice_data/{id}/book/{id}
#   regexMatch    any string                  regular
#   ipMatch       192.168.2.123	            192.168.2.0/24
# 
# 3.自定义函数
# 首先，准备好你的函数。 它接受一些参数，然后返回一个布尔类型：
# func KeyMatch(key1 string, key2 string) bool {
#     i := strings.Index(key2, "*")
#     if i == -1 {
#         return key1 == key2
#     }
#     if len(key1) > i {
#         return key1[:i] == key2[:i]
#     }
#     return key1 == key2[:i]
# }
# 然后用interface{}类型包装：
# func KeyMatchFunc(args ...interface{}) (interface{}, error) {
#     name1 := args[0].(string)
#     name2 := args[1].(string)
# 
#     return (bool)(KeyMatch(name1, name2)), nil
# }
# 最后，在Casbin的执行者(enforcer)中注册这个函数：
# e.AddFunction("my_func", KeyMatchFunc)
# 现在，你可以在你的model CONF中像这样使用这个函数：
# [matchers]
# m = r.sub == p.sub && my_func(r.obj, p.obj) && r.act == p.act
# 